name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # 触发条件：推送 v 开头的标签，如 v1.0.0
  workflow_dispatch:
    inputs:
      tag:
        description: '发布版本标签（如 v1.0.0）'
        required: true
        type: string

permissions:
  contents: write
  discussions: write

jobs:
  create-release:
    name: 创建 GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 获取版本号
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: 生成变更日志
        id: changelog
        run: |
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            # 如果是第一个版本，获取所有提交
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # 获取两个标签之间的提交
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # 保存到文件，避免特殊字符问题
          echo "$CHANGELOG" > changelog.txt
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: 构建发布说明
        id: release_notes
        run: |
          cat > release_notes.md <<'EOF'
          ## 🎉 Security Auto Scan ${{ steps.version.outputs.version }}

          ### 📦 安装方式

          #### 方式1：从 GitHub Marketplace 安装

          访问 [GitHub Marketplace](https://github.com/marketplace/actions/security-auto-scan) 直接安装

          #### 方式2：在 workflow 中使用

          ```yaml
          - name: Security Auto Scan
            uses: h7ml/security-auto-scan@${{ steps.version.outputs.version }}
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              keyword: '.oast.fun'
              dry-run: 'false'
          ```

          ### 📝 变更内容

          EOF

          if [ -n "${{ steps.changelog.outputs.previous_tag }}" ]; then
            echo "**完整对比**: [\`${{ steps.changelog.outputs.previous_tag }}...${{ steps.version.outputs.version }}\`](https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.previous_tag }}...${{ steps.version.outputs.version }})" >> release_notes.md
            echo "" >> release_notes.md
          fi

          cat changelog.txt >> release_notes.md

          cat >> release_notes.md <<'EOF'

          ### 🚀 快速开始

          详细使用说明请参考：
          - [README](https://github.com/${{ github.repository }}#readme)
          - [使用示例](https://github.com/${{ github.repository }}/blob/main/EXAMPLES.md)

          ### 📊 支持的功能

          - ✅ 自动扫描所有仓库（个人 + 组织）
          - ✅ 自动清理恶意 workflow 文件
          - ✅ 日志脱敏（自动隐藏敏感信息）
          - ✅ 多格式报告（Markdown/JSON/HTML/PDF）
          - ✅ Webhook 通知（Slack/Discord/Teams）
          - ✅ 自动创建 Issue 报警
          - ✅ 缓存优化（性能提升 50-80%）

          ### ⚠️ 重要提醒

          - 使用完成后请立即撤销 Token：https://github.com/settings/tokens
          - 建议先使用 `dry-run: true` 测试
          - 确保 Token 拥有 `repo` 和 `workflow` 权限

          ---

          **完整文档**: https://github.com/${{ github.repository }}
          EOF

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: false
          discussion_category_name: Announcements
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 更新 major 和 minor 标签
        run: |
          VERSION=${{ steps.version.outputs.version }}
          VERSION_NUM=${{ steps.version.outputs.version_number }}

          # 解析版本号
          MAJOR=$(echo $VERSION_NUM | cut -d. -f1)
          MINOR=$(echo $VERSION_NUM | cut -d. -f1-2)

          # 更新 major 标签 (如 v1)
          git tag -fa "v${MAJOR}" -m "Update v${MAJOR} to $VERSION"
          git push origin "v${MAJOR}" --force

          # 更新 minor 标签 (如 v1.0)
          git tag -fa "v${MINOR}" -m "Update v${MINOR} to $VERSION"
          git push origin "v${MINOR}" --force

          echo "✅ 已更新标签: v${MAJOR}, v${MINOR}"

  marketplace-publish:
    name: 发布到 GitHub Marketplace
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{ !contains(github.ref, 'beta') && !contains(github.ref, 'alpha') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 验证 action.yml
        run: |
          # 检查必需字段
          if ! grep -q "^name:" action.yml; then
            echo "❌ action.yml 缺少 name 字段"
            exit 1
          fi

          if ! grep -q "^description:" action.yml; then
            echo "❌ action.yml 缺少 description 字段"
            exit 1
          fi

          if ! grep -q "branding:" action.yml; then
            echo "⚠️ 建议添加 branding 字段以提升 Marketplace 展示效果"
          fi

          echo "✅ action.yml 验证通过"

      - name: Marketplace 发布说明
        run: |
          cat <<'EOF'

          📢 GitHub Marketplace 发布说明
          ================================

          此 Action 已包含 Marketplace 所需的所有元数据：

          ✅ name: Security Auto Scan
          ✅ description: 自动扫描和清理 GitHub Actions 中的恶意 workflow 文件
          ✅ branding:
             - icon: shield
             - color: red

          发布到 Marketplace 需要：

          1. 首次发布：在 GitHub 仓库页面点击 "Draft a new release"
          2. 勾选 "Publish this Action to the GitHub Marketplace"
          3. 同意 GitHub Marketplace 条款
          4. 后续版本会自动发布（只要推送新标签）

          Marketplace 链接（发布后）:
          https://github.com/marketplace/actions/security-auto-scan

          EOF

  notify-success:
    name: 发布成功通知
    runs-on: ubuntu-latest
    needs: [create-release, marketplace-publish]
    if: always()

    steps:
      - name: 获取版本号
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 发布结果
        run: |
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "✅ GitHub Release 创建成功"
            echo "   查看: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          else
            echo "❌ GitHub Release 创建失败"
          fi

          if [ "${{ needs.marketplace-publish.result }}" = "success" ]; then
            echo "✅ Marketplace 发布验证通过"
            echo "   查看: https://github.com/marketplace/actions/security-auto-scan"
          elif [ "${{ needs.marketplace-publish.result }}" = "skipped" ]; then
            echo "⏭️  Marketplace 发布已跳过（beta/alpha 版本）"
          else
            echo "⚠️  Marketplace 发布检查失败（请查看日志）"
          fi
