name: 'Security Auto Scan'
description: '自动扫描和清理 GitHub Actions 中的恶意 workflow 文件'
author: 'h7ml'
branding:
  icon: 'shield'
  color: 'red'

inputs:
  github-token:
    description: 'GitHub Token (需要 repo 和 workflow 权限)'
    required: true

  keyword:
    description: '搜索关键词（恶意特征）'
    required: false
    default: '.oast.fun'

  dry-run:
    description: '仅扫描模式（true/false）'
    required: false
    default: 'false'

  create-issue:
    description: '发现威胁时创建 Issue（true/false）'
    required: false
    default: 'true'

  disable-workflows:
    description: '禁用受感染仓库的工作流（true/false）'
    required: false
    default: 'false'

  mask-sensitive-data:
    description: '日志脱敏（自动隐藏敏感信息 - true/false）'
    required: false
    default: 'true'

  notification-webhook:
    description: 'Webhook URL（支持 Slack/Teams/Discord 等）'
    required: false
    default: ''

  notification-template:
    description: '通知模板（compact/detailed/custom）'
    required: false
    default: 'detailed'

  report-format:
    description: '报告输出格式（markdown/json/html/pdf）'
    required: false
    default: 'markdown'

outputs:
  infected-repos:
    description: '受感染仓库数量'

  success-count:
    description: '清理成功数量'

  failed-count:
    description: '清理失败数量'

  report-path:
    description: '扫描报告路径'

runs:
  using: 'composite'
  steps:
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r "${{ github.action_path }}/requirements.txt"

    - name: Setup Git
      shell: bash
      run: |
        git config --global user.name "Security Bot"
        git config --global user.email "security-bot@github.com"

    - name: Run security scan
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        KEYWORD: ${{ inputs.keyword }}
        SCAN_ONLY: ${{ inputs.dry-run }}
        DISABLE_WORKFLOWS: ${{ inputs.disable-workflows }}
        MASK_SENSITIVE_DATA: ${{ inputs.mask-sensitive-data }}
        NOTIFICATION_WEBHOOK: ${{ inputs.notification-webhook }}
        NOTIFICATION_TEMPLATE: ${{ inputs.notification-template }}
        REPORT_FORMAT: ${{ inputs.report-format }}
      run: |
        python "${{ github.action_path }}/scripts/scan.py"

    - name: Set outputs
      shell: bash
      id: scan-result
      run: |
        # 读取扫描结果
        REPORT_FILE=$(ls -t security/reports/cleanup-report-*.md 2>/dev/null | head -1)

        if [ -f "$REPORT_FILE" ]; then
          INFECTED=$(grep "受感染仓库:" "$REPORT_FILE" | grep -oE '[0-9]+' | head -1 || echo "0")
          SUCCESS=$(grep "清理成功:" "$REPORT_FILE" | grep -oE '[0-9]+' | head -1 || echo "0")
          FAILED=$(grep "清理失败:" "$REPORT_FILE" | grep -oE '[0-9]+' | head -1 || echo "0")

          echo "infected-repos=$INFECTED" >> $GITHUB_OUTPUT
          echo "success-count=$SUCCESS" >> $GITHUB_OUTPUT
          echo "failed-count=$FAILED" >> $GITHUB_OUTPUT
          echo "report-path=$REPORT_FILE" >> $GITHUB_OUTPUT
        else
          echo "infected-repos=0" >> $GITHUB_OUTPUT
          echo "success-count=0" >> $GITHUB_OUTPUT
          echo "failed-count=0" >> $GITHUB_OUTPUT
          echo "report-path=" >> $GITHUB_OUTPUT
        fi

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ github.run_number }}
        path: |
          security/logs/cleanup-*.log
          security/reports/cleanup-report-*.md
        retention-days: 30

    - name: Create Issue if threats found
      if: ${{ inputs.create-issue == 'true' && steps.scan-result.outputs.infected-repos > 0 }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const reportPath = '${{ steps.scan-result.outputs.report-path }}';

          if (!fs.existsSync(reportPath)) {
            console.log('报告文件不存在，跳过创建 Issue');
            return;
          }

          const reportContent = fs.readFileSync(reportPath, 'utf8');
          const infectedCount = '${{ steps.scan-result.outputs.infected-repos }}';
          const successCount = '${{ steps.scan-result.outputs.success-count }}';
          const failedCount = '${{ steps.scan-result.outputs.failed-count }}';

          // 提取失败仓库列表
          let failedReposSection = '';
          const failedReposMatch = reportContent.match(/## ❌ 失败的仓库\s+([\s\S]*?)(?=\n##|$)/);
          if (failedReposMatch && failedCount !== '0') {
            failedReposSection = '\n### ⚠️ 需要手动处理的仓库\n\n' + failedReposMatch[1].trim() + '\n';
          }

          const issueBody = [
            '## 🚨 自动安全扫描发现威胁\n',
            '\n> **执行时间**: ' + new Date().toLocaleString('zh-CN'),
            '\n> **运行编号**: [#' + context.runNumber + '](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ')',
            '\n\n---\n',
            '\n## 📊 扫描结果\n',
            '\n| 指标 | 数量 |',
            '\n|------|------|',
            '\n| 🔍 受感染仓库 | **' + infectedCount + '** 个 |',
            '\n| ✅ 清理成功 | ' + successCount + ' 个 |',
            '\n| ❌ 清理失败 | ' + failedCount + ' 个 |',
            failedReposSection,
            '\n\n---\n',
            '\n## 📋 完整报告\n',
            '\n<details>',
            '\n<summary>📄 点击展开详细报告</summary>\n',
            '\n\n```markdown',
            '\n' + reportContent.substring(0, 2000),
            '\n```\n',
            '\n</details>\n',
            '\n\n---\n',
            '\n## 📎 相关资源\n',
            '\n- 📦 [下载完整 Artifacts](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/actions/runs/' + context.runId + ')',
            '\n- 📊 [查看扫描报告](https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/tree/main/security/reports)',
            '\n\n---\n',
            '\n## ✅ 后续操作清单\n',
            '\n### 🔴 立即执行 (P0 - 2小时内)\n',
            failedCount !== '0' ? '\n- [ ] 🔧 **查看失败仓库列表，手动清理**\n' : '',
            '\n- [ ] 🔑 [撤销当前使用的 Token](https://github.com/settings/tokens)',
            '\n- [ ] 🔄 轮换所有泄露的 Secrets',
            '\n- [ ] 🔐 修改泄露的密码',
            '\n\n### 🟡 24小时内执行 (P1)',
            '\n- [ ] 🗝️ 重新生成 SSH 密钥',
            '\n- [ ] 🛡️ [启用 GitHub 2FA](https://github.com/settings/security)',
            '\n- [ ] 🔒 启用分支保护规则',
            '\n\n### 🟢 7天内执行 (P2)',
            '\n- [ ] 🔍 安全审计',
            '\n- [ ] ✍️ 配置 GPG 签名提交',
            '\n- [ ] 🤖 启用 Dependabot 和 CodeQL',
            '\n\n---\n',
            '\n<sub>🤖 由 [Security Auto Scan Action](https://github.com/marketplace/actions/security-auto-scan) 自动生成</sub>'
          ].join('');

          try {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 安全警告: 发现 ' + infectedCount + ' 个恶意 Workflow - ' + new Date().toISOString().split('T')[0],
              body: issueBody,
              labels: ['security', 'urgent']
            });
            console.log('✓ Issue 创建成功');
          } catch (error) {
            if (error.status === 410) {
              console.log('⚠️ Issues 功能已禁用，跳过创建 Issue');
            } else {
              console.error('创建 Issue 失败:', error.message);
            }
          }
